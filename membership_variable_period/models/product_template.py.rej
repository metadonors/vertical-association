diff a/membership_variable_period/models/product_template.py b/membership_variable_period/models/product_template.py	(rejected hunks)
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
-# (c) 2015 Antiun Ingeniería S.L. - Pedro M. Baeza
+# Copyright 2015 Antiun Ingeniería S.L. - Pedro M. Baeza
+# Copyright 2016 Antonio Espinosa <antonio.espinosa@tecnativa.com>
 # License AGPL-3 - See http://www.gnu.org/licenses/agpl-3.0.html
 
 import math
@@ -21,18 +22,20 @@ class ProductTemplate(models.Model):
         @rtype: date
         @return: The date incremented in 'interval' units of 'unit'.
         """
-        self.ensure_one()
-        delta = self.membership_interval_qty * int(math.ceil(qty))
-        if isinstance(date, str):
-            date = fields.Date.from_string(date)
-        if self.membership_interval_unit == 'days':
-            return date + timedelta(days=delta)
-        elif self.membership_interval_unit == 'weeks':
-            return date + timedelta(weeks=delta)
-        elif self.membership_interval_unit == 'months':
-            return date + relativedelta(months=delta)
-        elif self.membership_interval_unit == 'years':
-            return date + relativedelta(years=delta)
+        res = super(ProductTemplate, self)._get_next_date(date, qty=qty)
+        if self.membership_type == 'variable':
+            delta = self.membership_interval_qty * int(math.ceil(qty))
+            if isinstance(date, str):
+                date = fields.Date.from_string(date)
+            if self.membership_interval_unit == 'days':
+                return date + timedelta(days=delta)
+            elif self.membership_interval_unit == 'weeks':
+                return date + timedelta(weeks=delta)
+            elif self.membership_interval_unit == 'months':
+                return date + relativedelta(months=delta)
+            elif self.membership_interval_unit == 'years':
+                return date + relativedelta(years=delta)
+        return res  # pragma: no cover
 
     membership_type = fields.Selection(
         selection=[('fixed', 'Fixed dates'),
